{"version":3,"sources":["Weather/Card.js","Weather/CardList.js","App.js","reportWebVitals.js","index.js"],"names":["Card","time","temp_c","temp_f","icon","humidity","text","locationCity","locationRegion","className","src","alt","title","CardList","weather","location","name","region","tz_id","country","localtime","map","user","i","condition","App","props","state","fetch","then","response","json","result","setState","forecast","forecastday","hour","error","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAiBeA,G,WAfF,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,KAAKC,EAAkE,EAAlEA,OAAOC,EAA2D,EAA3DA,OAAgBC,GAA2C,EAApDC,SAAoD,EAA3CD,MAAKE,EAAsC,EAAtCA,KAAKC,EAAiC,EAAjCA,aAAaC,EAAoB,EAApBA,eAC9D,OACI,0BAASC,UAAU,wDAAnB,UACI,sBAAKA,UAAU,KAAf,UACI,qBAAKC,IAAKN,EAAMO,IAAI,aAAaF,UAAU,mBAAmBG,MAAM,iBACpE,oBAAIH,UAAU,2BACd,qBAAKA,UAAU,cAAf,SAA6B,iCAAOP,EAAP,cAC7B,qBAAKO,UAAU,cAAf,SAA6B,iCAAON,EAAP,cAC7B,qBAAKM,UAAU,mBAAf,SAAmCH,OAEvC,sBAAKG,UAAU,QAAf,UAAwBF,EAAxB,KAAwCC,KACxC,qBAAKC,UAAU,KAAf,SAAqBR,SC0BlBY,EAnCE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAAQC,EAAc,EAAdA,SACvB,OACI,gCACI,0BAASN,UAAU,kCAAnB,UACI,oBAAIA,UAAU,qCAAd,6BACA,sBAAKA,UAAU,SAAf,UACI,sBAAKA,UAAU,KAAf,uBAA+BM,EAASC,QACxC,sBAAKP,UAAU,KAAf,qBAA6BM,EAASE,UACtC,sBAAKR,UAAU,KAAf,oBAA4BM,EAASG,SACrC,sBAAKT,UAAU,KAAf,sBAA8BM,EAASI,WACvC,gDAAmBJ,EAASK,mBAGpC,qBAAKX,UAAU,6BAAf,SAEQK,EAAQO,KAAI,SAACC,EAAMC,GACnB,OACI,cAAC,EAAD,CAEAtB,KAAMqB,EAAKrB,KACXC,OAAQoB,EAAKpB,OACbC,OAAQmB,EAAKnB,OACbE,SAAUiB,EAAKjB,SACfD,KAAMkB,EAAKE,UAAUpB,KACrBE,KAAMgB,EAAKE,UAAUlB,KACrBC,aAAcQ,EAASC,KACvBR,eAAgBO,EAASE,QARpBM,YCgBdE,E,kDAjCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXb,QAAS,GACTC,SAAS,IAJM,E,gEAOE,IAAD,OAClBa,MAAM,oGACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZnB,QAASkB,EAAOE,SAASC,YAAY,GAAGC,KACxCrB,SAAUiB,EAAOjB,cAGrB,SAACsB,GACC,EAAKJ,SAAS,CACZI,e,+BAKD,IAAD,EACuBC,KAAKX,MAA1Bb,EADF,EACEA,QAAQC,EADV,EACUA,SAChB,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,CAAUK,QAASA,EAASC,SAAUA,U,GA7B5BwB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6503f397.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"tachyons\";\r\nconst Card = ({time,temp_c,temp_f,humidity,icon,text,locationCity,locationRegion}) => {\r\n    return(\r\n        <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\r\n            <div className=\"tc\">\r\n                <img src={icon} alt='weatherImg' className=\"br-100 h3 w3 dib\" title=\"WeatherImage\"/>\r\n                <hr className=\"mw3 bb bw1 b--black-10\"/>\r\n                <div className=\"temperature\"><span>{temp_c}&deg; c</span></div>  \r\n                <div className=\"temperature\"><span>{temp_f}&deg; f</span></div>  \r\n                <div className=\"weatherCondition\">{text}</div>\r\n            </div>\r\n            <div className=\"place\">{locationCity}, {locationRegion}</div>\r\n            <div className=\"f5\">{time}</div>\r\n        </article>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport 'tachyons';\r\n\r\nconst CardList = ({weather,location}) => {\r\n    return(\r\n        <div>\r\n            <article className=\"center mw5 mw6-ns hidden ba mv4\">\r\n                <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">WEATHER FORCAST</h1>\r\n                <div className=\"pa3 bt\">\r\n                    <div className=\"f3\">Location :{location.name}</div>\r\n                    <div className=\"f3\">Region :{location.region}</div>\r\n                    <div className=\"f3\">tz_id :{location.tz_id}</div>\r\n                    <div className=\"f3\">Country :{location.country}</div>\r\n                    <div>Date & Time :{location.localtime}</div>\r\n                </div>\r\n            </article>\r\n            <div className='flex flex-wrap items-start'>\r\n               {\r\n                    weather.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={i}\r\n                        time={user.time}\r\n                        temp_c={user.temp_c}\r\n                        temp_f={user.temp_f}\r\n                        humidity={user.humidity}\r\n                        icon={user.condition.icon}\r\n                        text={user.condition.text}\r\n                        locationCity={location.name}\r\n                        locationRegion={location.region}\r\n                        />\r\n                    );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './Weather/CardList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: [],\n      location:[]\n    };\n  }\n  componentDidMount() {\n    fetch('http://api.weatherapi.com/v1/forecast.json?key=95f16632360b44e79a6173255200712&q=Haldwani&days=1')\n      .then(response=> response.json())\n      .then(\n        (result) => {\n          this.setState({\n            weather: result.forecast.forecastday[0].hour,\n            location: result.location\n          });\n        },\n        (error) => {\n          this.setState({\n            error\n          });\n        }\n      )\n  }\n  render(){\n    const { weather,location } = this.state;\n    return (\n      <div className=\"App\">\n        <CardList weather={weather} location={location} />\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}